" Key Mappings
" ------------------------------------------------------------

" Eval line of (V)im script
nnoremap <Leader>V 0v$hy:<C-r>"<cr>

"Vertical split then hop to new buffer
noremap <Leader>v :vert new<cr>
noremap <Leader>h :new<cr>
nnoremap <Leader>gf :vs\|normal gf<cr>

" Alignment Shortcuts
vnoremap <Leader>a :Align
vnoremap <Leader>ah :Align =><cr>
vnoremap <Leader>ae :Align =<cr>

function! s:align_columns() range
  " execute a:firstline . ',' . a:lastline '!column -t'
  '<,'>!column -t
  '<,'>s/  \([^ ]\)/ \1/g
  nohls
  normal gv=
  redraw " gets rid of: Press Enter to continue
endfunction

vnoremap <silent> <Leader>ac :call <SID>align_columns()<cr>

" Bounce on (m)atching pairs without the awkward Shift-5 reach
vmap m %
nmap <Leader>m %
omap <Leader>m %

" make scrolling the viewport a bit faster
nnoremap <C-e> 5<C-e>
nnoremap <C-y> 5<C-y>

" swap ' and ` keys. ` is more useful than ', but less convenient. FIXED.
nnoremap ' `
nnoremap ` '

" tabs
nnoremap <Leader>tt :tabnew<cr>
nnoremap <Leader>tn :tabnext<cr>
nnoremap <Leader>tp :tabprev<cr>
nnoremap <Leader>tc :tabclose<cr>
nnoremap <Leader>th :tabmove -1<cr>
nnoremap <Leader>tl :tabmove +1<cr>
nnoremap <Leader>tH :tabmove 0<cr>
nnoremap <Leader>tL :tabmove<cr>

nnoremap <C-q> :q<cr>

" Cursor Movement *************************************************************
" Make cursor move by visual lines instead of file lines (when wrapping)
map <up> gk
map k gk
imap <up> <C-o>gk
map <down> gj
map j gj
imap <down> <C-o>gj
map E ge

" Override these cursor movements to make them more useful
" since ^ and $ are needed all the time but require leaving
" home row, and I never use H/M/L
map H ^
map L $

" Ruby stuff ******************************************************************
"compiler ruby         " Enable compiler support for ruby
"map <F5> :!ruby %<CR>

" let's me type a ruby method name, then hit shift-enter to add the def/end
" and leave the cursor positioned in the body of the method.
imap <S-Enter> <ESC>Idef <ESC>oend<ESC>O

" allows moving between split windows much faster and more intuitive
map <C-up>    <C-W><up>
map <C-down>  <C-W><down>
map <C-left>  <C-W><left>
map <C-right> <C-W><right>

map <C-J> <C-W>j
map <C-K> <C-W>k
map <C-H> <C-W>h
map <C-L> <C-W>l

" nmap <F5 run current spec in tmux pane
nmap <silent> <F5> :!tmux -S /tmp/side send-keys -t 1.3 "clear; tmux clear-history; bundle exec rspec %" Enter &<cr> | redraw!

nmap <silent> <Leader>ag "ayiw:Ag <C-r>"<cr>

" <F7> toggles hidden characters
map  <F7> :set list!<CR>
imap <F7> <ESC>:set list!<CR>a

" <F9> toggles word wrap
map  <F9> :set wrap!<CR>
imap <F9> <ESC>:set wrap!<CR>a

" <F8> toggles whether the last searched string is highlighted
map  <F8> :set hls!<CR>
imap <F8> <ESC>:set hls!<CR>a

" <F8 toggles whether the last searched string is highlighted
map  <F8> :set hls!<CR>
imap <F8> <ESC>:set hls!<CR>a

" duplicate visual selection beneath
nmap <Leader>y yyp
vmap <Leader>y y'>p

" duplicate and comment out orig selection
vmap <Leader>Y y'>pgv<C-Space>'><CR>
nmap <Leader>Y yypk<C-Space>j

" Run macro (in q)
nnoremap <Leader>q @q
vnoremap <Leader>q :normal @q<cr>

nnoremap <silent> <Space> :nohlsearch<cr>

" Ack for word under cursor
nnoremap <silent> <Leader>A yiw:Ack <C-r>"<cr>

" opposite of join, splits on spaces
nnoremap <Leader>J :s/ \+/\r/g \| nohlsearch<cr>

" replace all instances of word under cursor
nnoremap <Leader>s :let a=input("Replace \"<C-r><C-w>\" with: ") \| %s/<C-r><C-w>/\=a/g<cr>
"
" not really sure what defines this, but it slows down my ,s
" unmapping until I get rid of it's origin
" unmap <Leader>swp

function! s:toggle_ruby_symbol_string()
  let save_cursor = getpos(".")

  normal! viw`<h"lyl
  let first_char = @l

  if first_char == ':'
    normal! xi"`>a"
  else
    normal! xi:`>lx
  end

  call setpos('.', save_cursor)
endfunction

" toggle strings and symbols
nnoremap <Leader>: :call <SID>toggle_ruby_symbol_string()<cr>

" isolate selection
function! s:isolate_selection() range
  set foldmethod=manual
  normal zE
  exe "1,'<-fold"
  exe "'>+,$fold"
endfunction

vnoremap ,f :call <SID>isolate_selection()<cr>
